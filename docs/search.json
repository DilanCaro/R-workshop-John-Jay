[{"path":"index.html","id":"welcome","chapter":"Welcome","heading":"Welcome","text":"ready embark exciting journey world data analysis statistical exploration? Imagine power unlock hidden insights within vast datasets, create stunning visualizations, make data-driven decisions can shape future. Welcome world R programming! R just language; ’s key uncovering stories data tell. Whether ’re budding data scientist, curious researcher, someone simply loves solving puzzles, R offers thrilling adventure ’ll learn command data precision creativity. Get ready amazed endless possibilities R join global community data enthusiasts reshaping world, one analysis time.website, resources, examples practice master R.","code":""},{"path":"index.html","id":"objectives","chapter":"Welcome","heading":"Objectives","text":"Timeline: Jan 24, Jan 28, Jan 31","code":""},{"path":"index.html","id":"session-1-r-basics-2-hours","chapter":"Welcome","heading":"Session 1: R Basics (2 hours)","text":"","code":""},{"path":"index.html","id":"part-1-introduction-to-r-30-minutes","chapter":"Welcome","heading":"Part 1: Introduction to R (30 minutes)","text":"R use ?Installing R RStudioBasic RStudio layout functionality","code":""},{"path":"index.html","id":"part-2-r-fundamentals-30-minutes","chapter":"Welcome","heading":"Part 2: R Fundamentals (30 minutes)","text":"R calculatorVariables data types (numeric, character)Basic arithmetic operations","code":""},{"path":"index.html","id":"part-3-data-structures-30-minutes","chapter":"Welcome","heading":"Part 3: Data Structures (30 minutes)","text":"Vectors: Creating, indexing, operationsData frames: Creating exploring data framesImporting exporting data (CSV files)","code":""},{"path":"index.html","id":"part-4-data-manipulation-30-minutes","chapter":"Welcome","heading":"Part 4: Data Manipulation (30 minutes)","text":"Subsetting filtering dataAdding, removing, renaming columnsBasic data summary exploration","code":""},{"path":"index.html","id":"part-5-basic-data-visualization-10-minutes","chapter":"Welcome","heading":"Part 5: Basic Data Visualization (10 minutes)","text":"Creating simple plots using plot()","code":""},{"path":"index.html","id":"session-2-intermediate-r-2-hours","chapter":"Welcome","heading":"Session 2: Intermediate R (2 hours)","text":"","code":""},{"path":"index.html","id":"part-1-functions-and-control-structures-30-minutes","chapter":"Welcome","heading":"Part 1: Functions and Control Structures (30 minutes)","text":"Writing using functionsIf statements loops ()","code":""},{"path":"index.html","id":"part-2-data-cleaning-and-transformation-30-minutes","chapter":"Welcome","heading":"Part 2: Data Cleaning and Transformation (30 minutes)","text":"Handling missing dataReshaping data using dplyr functions (filter, arrange, mutate, summarize)","code":""},{"path":"index.html","id":"part-3-advanced-data-visualization-30-minutes","chapter":"Welcome","heading":"Part 3: Advanced Data Visualization (30 minutes)","text":"Creating customized plots ggplot2Adding titles, labels, themes plots","code":""},{"path":"index.html","id":"part-4-statistical-analysis-30-minutes","chapter":"Welcome","heading":"Part 4: Statistical Analysis (30 minutes)","text":"Introduction hypothesis testing statistical testsPerforming t-tests chi-squared tests","code":""},{"path":"index.html","id":"optional-part-5-working-with-dates-and-times-20-minutes","chapter":"Welcome","heading":"(Optional) Part 5: Working with Dates and Times (20 minutes)","text":"Handling date time data RCommon date time functions","code":""},{"path":"index.html","id":"session-3-advanced-r-2-hours","chapter":"Welcome","heading":"Session 3: Advanced R (2 hours)","text":"","code":""},{"path":"index.html","id":"part-1-advanced-data-manipulation-with-dplyr-30-minutes","chapter":"Welcome","heading":"Part 1: Advanced Data Manipulation with dplyr (30 minutes)","text":"Grouping summarizing dataJoining merging datasets","code":""},{"path":"index.html","id":"part-2-text-data-processing-30-minutes","chapter":"Welcome","heading":"Part 2: Text Data Processing (30 minutes)","text":"Manipulating analyzing text data using regular expressionsText mining basics","code":""},{"path":"index.html","id":"part-3-building-predictive-models-30-minutes","chapter":"Welcome","heading":"Part 3: Building Predictive Models (30 minutes)","text":"Introduction machine learning RCreating predictive models caret","code":""},{"path":"index.html","id":"part-4-interactive-dashboards-with-shiny-30-minutes","chapter":"Welcome","heading":"Part 4: Interactive Dashboards with Shiny (30 minutes)","text":"Introduction Shiny building web-based data dashboardsCreating simple Shiny app","code":""},{"path":"index.html","id":"part-5-version-control-and-collaboration-10-minutes","chapter":"Welcome","heading":"Part 5: Version Control and Collaboration (10 minutes)","text":"Using Git GitHub version control collaboration R projects","code":""},{"path":"r-basics.html","id":"r-basics","chapter":"R Basics","heading":"R Basics","text":"first session, lay foundation R journey. ’ll start introduction R, delving ’s popular choice among data enthusiasts. ’ll learn install R RStudio, user-friendly integrated development environment (IDE). ’ll explore basic layout functionality RStudio, setting stage coding adventures.’ll dive R’s fundamentals, treating trusty calculator. ’ll discover various data types, numeric character, grasp essential arithmetic operations. Moving forward, ’ll explore R’s data structures, including vectors data storage data frames structured datasets. ’ll also become adept importing exporting data using common formats like CSV files.won’t stop . next part session data manipulation. ’ll learn subset filter data, add, remove, rename columns, gain skills basic data summarization exploration. Finally, ’ll wrap basic data visualization, ’ll create simple plots visually represent data.","code":""},{"path":"part-i-introduction-to-r.html","id":"part-i-introduction-to-r","chapter":"Part I: Introduction to R","heading":"Part I: Introduction to R","text":"","code":""},{"path":"part-i-introduction-to-r.html","id":"what-is-r","chapter":"Part I: Introduction to R","heading":"What is R ?","text":"R programming language open-source software environment widely used statistical computing, data analysis, graphics. created Ross Ihaka Robert Gentleman University Auckland, New Zealand, early 1990s now maintained R Development Core Team. R particularly popular among statisticians, data scientists, researchers extensive statistical graphical capabilities.brief sentence: R dialect S.","code":""},{"path":"part-i-introduction-to-r.html","id":"what-is-s","chapter":"Part I: Introduction to R","heading":"What is S ?","text":"S language, developed John Chambers others Bell Telephone Laboratories, began 1976 internal statistical analysis tool, originally based Fortran libraries. evolved significantly time: 1988, rewritten C, leading system akin present form (Version 3).statistical analysis capabilities S detailed 1988 book “Statistical Models S” (white book) Chambers Hastie. current version, Version 4, released 1998 documented Chambers’ “Programming Data” (green book), remains use. ownership S changed hands several times: Bell Labs licensed StatSci (later Insightful Corp.) 1993, Insightful bought Lucent 2004, series acquisitions, TIBCO Software Inc. owned exclusively developed S since 2008. Insightful added features, including GUIs, marketed S-PLUS. Despite changes, core S language remained largely unchanged since 1998, year earned prestigious ACM Software System Award.","code":""},{"path":"part-i-introduction-to-r.html","id":"key-features-and-characteristics-of-r","chapter":"Part I: Introduction to R","heading":"Key features and characteristics of R :","text":"Data Analysis Statistics: R provides wide range statistical techniques libraries data analysis, hypothesis testing, regression analysis, clustering, . ’s known flexibility handling data conducting statistical experiments.Data Analysis Statistics: R provides wide range statistical techniques libraries data analysis, hypothesis testing, regression analysis, clustering, . ’s known flexibility handling data conducting statistical experiments.Data Visualization: R offers powerful tools creating variety high-quality data visualizations, including scatterplots, bar charts, histograms, heatmaps. ggplot2 package, particular, popular choice creating customized graphics.Data Visualization: R offers powerful tools creating variety high-quality data visualizations, including scatterplots, bar charts, histograms, heatmaps. ggplot2 package, particular, popular choice creating customized graphics.Open Source: R open-source software, means freely available anyone use, modify, distribute. led vibrant community users developers contribute packages extensions enhance functionality.Open Source: R open-source software, means freely available anyone use, modify, distribute. led vibrant community users developers contribute packages extensions enhance functionality.Package System: R rich ecosystem packages (libraries) extend core functionality. packages cover wide range domains, machine learning time series analysis bioinformatics geospatial data analysis. Users can easily install use packages tailor R specific needs.Package System: R rich ecosystem packages (libraries) extend core functionality. packages cover wide range domains, machine learning time series analysis bioinformatics geospatial data analysis. Users can easily install use packages tailor R specific needs.Cross-Platform: R runs various operating systems, including Windows, macOS, Linux, making accessible wide range users.Cross-Platform: R runs various operating systems, including Windows, macOS, Linux, making accessible wide range users.Command-Line Interface: R primarily uses command-line interface, although graphical user interfaces (GUIs) available, RStudio, provide user-friendly environment coding data analysis.Command-Line Interface: R primarily uses command-line interface, although graphical user interfaces (GUIs) available, RStudio, provide user-friendly environment coding data analysis.Community Support: R large active community users developers provide support, share code tutorials, contribute ongoing development language.Community Support: R large active community users developers provide support, share code tutorials, contribute ongoing development language.R versatile tool used various fields, including academia, industry, finance, healthcare, , tasks statistical analysis, data visualization, predictive modeling. popularity continues grow data-driven decision-making becomes increasingly important many domains.","code":""},{"path":"part-i-introduction-to-r.html","id":"installing-r-and-rstudio","chapter":"Part I: Introduction to R","heading":"Installing R and Rstudio","text":"Find installation guide pdf file.\nAlternatively , can look videos .Installation R windows Roger PengInstallation R windows Roger PengInstallation R Mac Roger PengInstallation R Mac Roger PengHow install Rstudio MacHow install Rstudio MacHow install Rstudio Windows\n### Basic RStudio layout functionality {-}\n\n\n\nFigure 1: : http://www.sthda.com/english/wiki/r-basics-quick--easy\n\n\ninstall Rstudio Windows\n### Basic RStudio layout functionality {-}\nFigure 1: : http://www.sthda.com/english/wiki/r-basics-quick--easy\nCode Editor/ R script: can write either R code , Rmarkdown. can include instructions computer execute.Code Editor/ R script: can write either R code , Rmarkdown. can include instructions computer execute.R console : see output code run , write code , automatically run enter traced back, R Script useful reusable code.R console : see output code run , write code , automatically run enter traced back, R Script useful reusable code.Workspace history:  space display variables created , use, history , building , git . check data loaded correctly can check see loaded.Workspace history:  space display variables created , use, history , building , git . check data loaded correctly can check see loaded.Plots files:  display graphs plots created, can switch back forth , export, save . Also, can select packages, get help R functions .Plots files:  display graphs plots created, can switch back forth , export, save . Also, can select packages, get help R functions .","code":""},{"path":"part-i-introduction-to-r.html","id":"what-are-packages","chapter":"Part I: Introduction to R","heading":"What are packages?","text":"power R lies packages. Since R open source, many people create packages .e, R scripts contain functions specific problems , may standard deviation , statistics, machine learning .install package, simply typeinstall.packages(\"package name\")Install package Bioconductor: biocLite()Install package Bioconductor: biocLite()Install package GitHub: devtools::install_github()Install package GitHub: devtools::install_github()View list installed packages: installed.packages()View list installed packages: installed.packages()Folder containing installed packages: .libPaths()Folder containing installed packages: .libPaths()load packageTo load packagelibrary(package name)View loaded packagessearch()Unload R package:detach(package name, unload = TRUE)Remove installed packages:remove.packages()Update installed packages:update.packages()","code":""},{"path":"part-ii-r-fundamentals.html","id":"part-ii-r-fundamentals","chapter":"Part II: R Fundamentals","heading":"Part II: R Fundamentals","text":"starting, Official manuals books learning :https://cran.r-project.org/doc/manuals/r-release/R-intro.htmlhttps://cran.r-project.org/doc/manuals/r-release/R-data.htmlhttps://cran.r-project.org/doc/manuals/r-release/R-exts.htmlhttps://cran.r-project.org/doc/manuals/r-release/R-lang.htmlR programming Data Science Roger D. Peng.R Data Science","code":""},{"path":"part-ii-r-fundamentals.html","id":"r-as-a-calculator","chapter":"Part II: R Fundamentals","heading":"R as a calculator","text":"best way get used R use calculator.can start using R console simple operations.\n### Basic arithmetic operations {-}AdditionSubtractionMultiplicationDivisionExponientiation","code":"\n3+5\n#> [1] 8\n143-12\n#> [1] 131\n4*5\n#> [1] 20\n180/23\n#> [1] 7.826087\n4^2\n#> [1] 16"},{"path":"part-ii-r-fundamentals.html","id":"arithmetic-functions","chapter":"Part II: R Fundamentals","heading":"Arithmetic Functions","text":"functions may useful replace calculatorAbsolute valueSquare rootRemainderLogarithms exponentials\n.e,\\[\\log_a b = c,\\quad ln_e b=, \\quad  e^{}=b\\]","code":"\nabs(-23)\n#> [1] 23\nsqrt(16)\n#> [1] 4\n7 %% 3\n#> [1] 1\nlog2(4)\n#> [1] 2\nlog10(1000)\n#> [1] 3\nlog(4)\n#> [1] 1.386294\nexp(8)\n#> [1] 2980.958\n2.71828^8\n#> [1] 2980.942"},{"path":"part-ii-r-fundamentals.html","id":"variables-and-data-types-numericcharacter","chapter":"Part II: R Fundamentals","heading":"Variables and data types (numeric,character)","text":"","code":""},{"path":"part-ii-r-fundamentals.html","id":"assigment-operators","chapter":"Part II: R Fundamentals","heading":"Assigment Operators","text":"R, create variable , can use assigment symbol <-, = however, later commonly used R.assign value 7 x , doWe can now perform operations variablesRemark: R case sensitive , x different Xcalling print(X) output errorR five basic “atomic classes objects:characternumeric (real numbers)integercomplexlogical (True/False)Use typeof() function find data type variable .\nCharacter Data type \ncharacter stores character values stringsNumeric Data type \nnumerical values .Integer Data type \nintegers, must specify , , must convert data type. Remark: decimal, remove decimal, acting floor function .can also create integer adding L itRemark: work decimalsComplex Data type \nComplex data types stored x+yi , .e, imaginary componentComplex Data type \nstores boolean values TRUE FALSE","code":"\nx <- 7\nprint(x)\n#> [1] 7\n3*x+3 # 3*7+3 = 21+3 =24\n#> [1] 24\nprint(X)\n#> Error in eval(expr, envir, enclos): object 'X' not found\nchar <- \"This is a character data type\"\nchar\n#> [1] \"This is a character data type\"\ntypeof(char)\n#> [1] \"character\"\nnum <- 3\nprint(num)\n#> [1] 3\nnum_2 <- -2.35\nnum_2\n#> [1] -2.35\ntypeof(num_2)\n#> [1] \"double\"\nint <- as.integer(3.6332)\nint\n#> [1] 3\ntypeof(int)\n#> [1] \"integer\"\nint2 <- as.integer(7)\nint2\n#> [1] 7\ntypeof(int2)\n#> [1] \"integer\"\nint3 <- 8L\nint3\n#> [1] 8\nint4 <- 3.4546L\nint4\n#> [1] 3.4546\ncompl <- 13+7i\ncompl\n#> [1] 13+7i\ntypeof(compl)\n#> [1] \"complex\"\ncomplex(real = 23, imaginary = 7)\n#> [1] 23+7i\nmy_bool <- TRUE\nmy_bool\n#> [1] TRUE\n\ntypeof(my_bool)\n#> [1] \"logical\"\n\nmy_boolean <- F\nmy_boolean\n#> [1] FALSE\ntypeof(my_boolean)\n#> [1] \"logical\""},{"path":"part-ii-r-fundamentals.html","id":"converting-data-types","chapter":"Part II: R Fundamentals","heading":"Converting Data types","text":"Convert NumericWe can convert values numeric. Using .numeric() change type keeping values .\nconvertingcomplex: removes imaginary partlogical: TRUE becomes 1 , FALSE becomes 0character: numerical values, letters NAWe can use .numeric() check variable numericConvert integer** Converting Logical **Return FALSE 0 , TRUE otherwise","code":"\n# Complex\nis.numeric(compl)\n#> [1] FALSE\nnumber <- as.numeric(compl)\n#> Warning: imaginary parts discarded in coercion\nnumber\n#> [1] 13\nis.numeric(number)\n#> [1] TRUE\n\n#Logical \nis.numeric(my_bool)\n#> [1] FALSE\nnumber2 <- as.numeric(my_bool)\nnumber2\n#> [1] 1\nis.numeric(number2)\n#> [1] TRUE\n\n# Character\nchar\n#> [1] \"This is a character data type\"\nis.numeric(char)\n#> [1] FALSE\nnumber3 <- as.numeric(char)\n#> Warning: NAs introduced by coercion\nnumber3\n#> [1] NA\nis.numeric(number3)\n#> [1] TRUE\n\nmy_char <- \"2023\"\nis.numeric(my_char)\n#> [1] FALSE\nnumber4 <- as.numeric(my_char)\nnumber4\n#> [1] 2023\nis.numeric(number4)\n#> [1] TRUE\ninte1<-as.integer(\"234\")\ninte1\n#> [1] 234\ntypeof(inte1)\n#> [1] \"integer\"\n\ninte2<-as.integer(23+6i)\n#> Warning: imaginary parts discarded in coercion\ninte2\n#> [1] 23\ntypeof(inte2)\n#> [1] \"integer\"\n\ninte3<-as.integer(F)\ninte3\n#> [1] 0\ntypeof(inte3)\n#> [1] \"integer\"\nprint(as.logical(0))\n#> [1] FALSE\ntypeof(as.logical(0))\n#> [1] \"logical\"\n\nprint(as.logical(-324))\n#> [1] TRUE\ntypeof(as.logical(-324))\n#> [1] \"logical\""},{"path":"part-ii-r-fundamentals.html","id":"assigment-operators-1","chapter":"Part II: R Fundamentals","heading":"Assigment Operators","text":"","code":""},{"path":"part-ii-r-fundamentals.html","id":"getting-help","chapter":"Part II: R Fundamentals","heading":"Getting help","text":"can use Plots files pane (bottom left pane) click Help search whichever function need help .can also use ? function.open information function plots files pane.","code":"\n?mean"},{"path":"data-structures.html","id":"data-structures","chapter":"Data Structures","heading":"Data Structures","text":"","code":""},{"path":"data-structures.html","id":"vectors-creating-indexing-and-operations","chapter":"Data Structures","heading":"Vectors: Creating, indexing, and operations","text":"Exercise:Create vector favorite numbers.Access third element vector.Create new vector square element original vector.","code":"\n# Creating a vector\nv <- c(1, 2, 3, 4, 5)\nprint(v)\n#> [1] 1 2 3 4 5\n\n# Indexing a vector\nprint(v[2])  # Access the second element\n#> [1] 2\n\n# Vector operations\nv2 <- v * 2  # Multiply each element by 2\nprint(v2)\n#> [1]  2  4  6  8 10"},{"path":"data-structures.html","id":"data-frames-creating-and-exploring-data-frames","chapter":"Data Structures","heading":"Data frames: Creating and exploring data frames","text":"Exercise:Create data frame least three columns four rows.Print number rows columns data frame.Display summary statistics data frame.","code":"\n# Creating a data frame\ndf <- data.frame(\n  Name = c(\"Alice\", \"Bob\", \"Charlie\"),\n  Age = c(25, 30, 35),\n  Salary = c(50000, 60000, 70000)\n)\nprint(df)\n#>      Name Age Salary\n#> 1   Alice  25  50000\n#> 2     Bob  30  60000\n#> 3 Charlie  35  70000\n\n# Exploring data frames\nprint(dim(df))  # Dimensions of the data frame\n#> [1] 3 3\nprint(colnames(df))  # Column names\n#> [1] \"Name\"   \"Age\"    \"Salary\"\nprint(summary(df))  # Summary statistics\n#>      Name                Age           Salary     \n#>  Length:3           Min.   :25.0   Min.   :50000  \n#>  Class :character   1st Qu.:27.5   1st Qu.:55000  \n#>  Mode  :character   Median :30.0   Median :60000  \n#>                     Mean   :30.0   Mean   :60000  \n#>                     3rd Qu.:32.5   3rd Qu.:65000  \n#>                     Max.   :35.0   Max.   :70000"},{"path":"data-structures.html","id":"importing-and-exporting-data-csv-files","chapter":"Data Structures","heading":"Importing and exporting data (CSV files)","text":"","code":"\n# Exporting data to CSV\nwrite.csv(df, \"my_data.csv\", row.names = FALSE)\n\n# Importing data from CSV\ndf_imported <- read.csv(\"my_data.csv\")\nprint(df_imported)\n#>      Name Age Salary\n#> 1   Alice  25  50000\n#> 2     Bob  30  60000\n#> 3 Charlie  35  70000"},{"path":"part-iv-data-manipulation-30-minutes.html","id":"part-iv-data-manipulation-30-minutes","chapter":"Part IV: Data Manipulation (30 minutes)","heading":"Part IV: Data Manipulation (30 minutes)","text":"","code":""},{"path":"part-iv-data-manipulation-30-minutes.html","id":"subsetting-and-filtering-data","chapter":"Part IV: Data Manipulation (30 minutes)","heading":"Subsetting and filtering data","text":"","code":"\n# Creating a sample data frame\ndata <- data.frame(\n  id = 1:5,\n  name = c(\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eva\"),\n  age = c(25, 30, 22, 28, 24)\n)\n# Subsetting by a specific column\nages <- data$age\nprint(ages)\n#> [1] 25 30 22 28 24\n\n# Filtering data based on a condition\nyoung_adults <- subset(data, age < 30)\nprint(young_adults)\n#>   id    name age\n#> 1  1   Alice  25\n#> 3  3 Charlie  22\n#> 4  4   David  28\n#> 5  5     Eva  24"},{"path":"part-iv-data-manipulation-30-minutes.html","id":"adding-removing-and-renaming-columns","chapter":"Part IV: Data Manipulation (30 minutes)","heading":"Adding, removing, and renaming columns","text":"","code":"\n# Adding a new column 'salary'\ndata$salary <- c(55000, 50000, 60000, 52000, 58000)\nprint(data)\n#>   id    name age salary\n#> 1  1   Alice  25  55000\n#> 2  2     Bob  30  50000\n#> 3  3 Charlie  22  60000\n#> 4  4   David  28  52000\n#> 5  5     Eva  24  58000\n\n# Removing the 'salary' column\ndata$salary <- NULL\nprint(data)\n#>   id    name age\n#> 1  1   Alice  25\n#> 2  2     Bob  30\n#> 3  3 Charlie  22\n#> 4  4   David  28\n#> 5  5     Eva  24\n\n# Renaming the 'name' column to 'first_name'\nnames(data)[names(data) == \"name\"] <- \"first_name\"\nprint(data)\n#>   id first_name age\n#> 1  1      Alice  25\n#> 2  2        Bob  30\n#> 3  3    Charlie  22\n#> 4  4      David  28\n#> 5  5        Eva  24"},{"path":"part-iv-data-manipulation-30-minutes.html","id":"basic-data-summary-and-exploration","chapter":"Part IV: Data Manipulation (30 minutes)","heading":"Basic data summary and exploration","text":"","code":"\n# Summary statistics of the data frame\nsummary(data)\n#>        id     first_name             age      \n#>  Min.   :1   Length:5           Min.   :22.0  \n#>  1st Qu.:2   Class :character   1st Qu.:24.0  \n#>  Median :3   Mode  :character   Median :25.0  \n#>  Mean   :3                      Mean   :25.8  \n#>  3rd Qu.:4                      3rd Qu.:28.0  \n#>  Max.   :5                      Max.   :30.0\n\n# Structure of the data frame\nstr(data)\n#> 'data.frame':    5 obs. of  3 variables:\n#>  $ id        : int  1 2 3 4 5\n#>  $ first_name: chr  \"Alice\" \"Bob\" \"Charlie\" \"David\" ...\n#>  $ age       : num  25 30 22 28 24\n\n# Average age of the individuals in the data frame\naverage_age <- mean(data$age)\nprint(average_age)\n#> [1] 25.8\n\n# Count of unique names in the data frame\nunique_names_count <- length(unique(data$first_name))\nprint(unique_names_count)\n#> [1] 5"},{"path":"part-v-basic-data-visualization-20-minutes.html","id":"part-v-basic-data-visualization-20-minutes","chapter":"Part V: Basic Data Visualization (20 minutes)","heading":"Part V: Basic Data Visualization (20 minutes)","text":"","code":""},{"path":"part-v-basic-data-visualization-20-minutes.html","id":"creating-simple-plots-using-plot","chapter":"Part V: Basic Data Visualization (20 minutes)","heading":"Creating simple plots using plot()","text":"","code":"\n# Example: Simple scatter plot\nx <- 1:10\ny <- rnorm(10)\nplot(x, y, main = \"Simple Scatter Plot\", xlab = \"X Axis\", ylab = \"Y Axis\", col = \"blue\")"},{"path":"part-v-basic-data-visualization-20-minutes.html","id":"creating-more-complex-plots-ggplot","chapter":"Part V: Basic Data Visualization (20 minutes)","heading":"Creating more complex plots ggplot()","text":"","code":"\n# Installing and loading ggplot2 package\n# install.packages(\"ggplot2\")\nlibrary(ggplot2)\n\n# Example: Complex scatter plot with ggplot2\nggplot(data.frame(x, y), aes(x, y)) + geom_point() + \n  ggtitle(\"Complex Scatter Plot with ggplot2\") +\n  xlab(\"X Axis\") + ylab(\"Y Axis\")"},{"path":"part-v-basic-data-visualization-20-minutes.html","id":"creating-plots-with-other-library","chapter":"Part V: Basic Data Visualization (20 minutes)","heading":"Creating plots with other library","text":"","code":"\n# Installing and loading the lattice package\n# install.packages(\"lattice\")\nlibrary(lattice)\n\n# Example: Lattice plot\nxyplot(y ~ x, data = data.frame(x, y), main = \"Lattice Plot\", type = \"p\")"},{"path":"part-v-basic-data-visualization-20-minutes.html","id":"creating-demographic-map-3d-plots","chapter":"Part V: Basic Data Visualization (20 minutes)","heading":"Creating demographic, map, 3d plots","text":"","code":"\n# Installing and loading plotly for 3D plots\n#install.packages(\"plotly\")\nlibrary(plotly)\n#> \n#> Attaching package: 'plotly'\n#> The following object is masked from 'package:ggplot2':\n#> \n#>     last_plot\n#> The following object is masked from 'package:stats':\n#> \n#>     filter\n#> The following object is masked from 'package:graphics':\n#> \n#>     layout\n\n# Example: 3D Scatter Plot with plotly\nplot_ly(data.frame(x, y, z = rnorm(10)), x = ~x, y = ~y, z = ~z, type = \"scatter3d\", mode = \"markers\")\n\n# Installing and loading maps package for map plots\n#install.packages(\"maps\")\nlibrary(maps)\n\n# Example: Map plot\nmap(\"world\", fill = TRUE, col = \"#D3D3D3\", border = \"white\", xlim = c(-130, -60), ylim = c(20, 50))\n# --- Part V: Basic Data Visualization (20 minutes) ---\n\n# Creating a 3D surface plot with plotly\n\n# Installing and loading plotly package\n# install.packages(\"plotly\")\nlibrary(plotly)\n\n# Simulating a surface for a function (e.g., Rosenbrock function)\nrosenbrock <- function(x, y) { (1 - x)^2 + 100 * (y - x^2)^2 }\nx <- seq(-2, 2, length.out = 50)\ny <- seq(-1, 3, length.out = 50)\nz <- outer(x, y, rosenbrock)\n\n# Example: 3D Surface Plot\nplot_ly(x = ~x, y = ~y, z = ~z, type = \"surface\", \n        contours = list(z = list(show = TRUE, usecolormap = TRUE, highlightcolor = \"#ff0000\", project = list(z = TRUE))))"},{"path":"intermediate-r.html","id":"intermediate-r","chapter":"Intermediate R","heading":"Intermediate R","text":"","code":""},{"path":"part-i-functions-and-control-structures-30-minutes.html","id":"part-i-functions-and-control-structures-30-minutes","chapter":"Part I: Functions and Control Structures (30 minutes)","heading":"Part I: Functions and Control Structures (30 minutes)","text":"","code":""},{"path":"part-i-functions-and-control-structures-30-minutes.html","id":"writing-and-using-functions","chapter":"Part I: Functions and Control Structures (30 minutes)","heading":"Writing and using functions","text":"","code":"\n# Example: A simple function to calculate the square of a number\nsquare_function <- function(x) {\n  return(x^2)\n}\n\n# Using the function\nresult <- square_function(4)\nprint(result)\n#> [1] 16"},{"path":"part-i-functions-and-control-structures-30-minutes.html","id":"if-statements-and-loops-for-and-while","chapter":"Part I: Functions and Control Structures (30 minutes)","heading":"If statements and loops (for and while)","text":"","code":"\n# Example: Using if statement\nnumber <- 5\nif (number > 0) {\n  print(\"Positive number\")\n} else {\n  print(\"Non-positive number\")\n}\n#> [1] \"Positive number\"\n\n# Example: For loop to calculate the factorial of a number\nfactorial_function <- function(n) {\n  result <- 1\n  for (i in 1:n) {\n    result <- result * i\n  }\n  return(result)\n}\n\nfactorial_of_5 <- factorial_function(5)\nprint(factorial_of_5)\n#> [1] 120\n\n# Example: While loop to find the first square number greater than 100\nnumber <- 1\nwhile (number^2 <= 100) {\n  number <- number + 1\n}\nprint(paste(\"First square number greater than 100 is:\", number^2))\n#> [1] \"First square number greater than 100 is: 121\""},{"path":"part-ii-data-cleaning-and-transformation-30-minutes.html","id":"part-ii-data-cleaning-and-transformation-30-minutes","chapter":"Part II: Data Cleaning and Transformation (30 minutes)","heading":"Part II: Data Cleaning and Transformation (30 minutes)","text":"Data cleaning info","code":""},{"path":"part-ii-data-cleaning-and-transformation-30-minutes.html","id":"handling-missing-data","chapter":"Part II: Data Cleaning and Transformation (30 minutes)","heading":"Handling missing data","text":"Managing missing dat, ,\nfirst","code":""},{"path":"part-ii-data-cleaning-and-transformation-30-minutes.html","id":"reshaping-data-using-dplyr-functions-filter-arrange-mutate-summarize","chapter":"Part II: Data Cleaning and Transformation (30 minutes)","heading":"Reshaping data using dplyr functions (filter, arrange, mutate, summarize)","text":"","code":""},{"path":"part-iii-advanced-data-visualization-30-minutes.html","id":"part-iii-advanced-data-visualization-30-minutes","chapter":"Part III: Advanced Data Visualization (30 minutes)","heading":"Part III: Advanced Data Visualization (30 minutes)","text":"","code":""},{"path":"part-iii-advanced-data-visualization-30-minutes.html","id":"creating-customized-plots-with-ggplot2","chapter":"Part III: Advanced Data Visualization (30 minutes)","heading":"Creating customized plots with ggplot2","text":"","code":"\n\n# Load ggplot2 package\nlibrary(ggplot2)\n\n# Example: Customized scatter plot with ggplot2\ndata <- data.frame(x = rnorm(100), y = rnorm(100))\nggplot(data, aes(x = x, y = y)) +\n  geom_point(aes(color = x*y), size = 3) +\n  scale_color_gradient(low = \"blue\", high = \"red\") +\n  ggtitle(\"Customized Scatter Plot with Color Gradient\") +\n  theme_minimal()"},{"path":"part-iii-advanced-data-visualization-30-minutes.html","id":"adding-titles-labels-and-themes-to-plots","chapter":"Part III: Advanced Data Visualization (30 minutes)","heading":"Adding titles, labels, and themes to plots","text":"","code":"\n# Example: Enhanced bar plot with titles, labels, and a custom theme\ndata <- data.frame(\n  category = c(\"A\", \"B\", \"C\", \"D\"),\n  value = c(10, 15, 7, 12)\n)\nggplot(data, aes(x = category, y = value, fill = category)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Enhanced Bar Plot\",\n       subtitle = \"Bar plot with custom labels and theme\",\n       x = \"Category\",\n       y = \"Value\",\n       fill = \"Category\") +\n  theme_bw() +\n  theme(plot.title = element_text(hjust = 0.5))"},{"path":"part-iv-statistical-analysis-30-minutes.html","id":"part-iv-statistical-analysis-30-minutes","chapter":"Part IV: Statistical Analysis (30 minutes)","heading":"Part IV: Statistical Analysis (30 minutes)","text":"","code":""},{"path":"part-iv-statistical-analysis-30-minutes.html","id":"introduction-to-hypothesis-testing-and-statistical-tests","chapter":"Part IV: Statistical Analysis (30 minutes)","heading":"Introduction to hypothesis testing and statistical tests","text":"Hypothesis testing statistical method used make inferences draw conclusions population based sample data. starts null hypothesis (H0) assumes effect difference, alternative hypothesis (H1) contradicts null hypothesis.process involves:\n1. Defining null alternative hypotheses.\n2. Selecting significance level (alpha, typically 0.05).\n3. Calculating test statistic based sample data.\n4. Determining p-value, probability observing test statistic something extreme null hypothesis.\n5. Comparing p-value significance level decide whether reject null hypothesis.Statistical tests vary based type data research question. Common tests include t-tests (means), chi-squared tests (categorical data), ANOVA (comparing means across multiple groups), regression analysis (relationships variables).","code":""},{"path":"part-iv-statistical-analysis-30-minutes.html","id":"performing-t-tests-and-chi-squared-tests","chapter":"Part IV: Statistical Analysis (30 minutes)","heading":"Performing t-tests and chi-squared tests","text":"","code":"\n# Load necessary libraries\nlibrary(stats)\n\n# Example: Performing a t-test\n# Hypothesis: The mean of a sample is different from the population mean (which we assume to be 0 for this example).\n\nsample_data <- rnorm(30)  # Generating a sample of 30 random normal numbers\nt_test_result <- t.test(sample_data, mu = 0)  # Performing a one-sample t-test\nprint(t_test_result)\n#> \n#>  One Sample t-test\n#> \n#> data:  sample_data\n#> t = -0.66944, df = 29, p-value = 0.5085\n#> alternative hypothesis: true mean is not equal to 0\n#> 95 percent confidence interval:\n#>  -0.4735027  0.2399700\n#> sample estimates:\n#>  mean of x \n#> -0.1167663\n\n# Example: Performing a chi-squared test\n# Hypothesis: Two categorical variables are independent.\n\n# Creating a sample contingency table\nobserved <- matrix(c(10, 10, 20, 20), nrow = 2, byrow = TRUE)\ndimnames(observed) <- list(gender = c(\"Male\", \"Female\"), preference = c(\"Option A\", \"Option B\"))\n\nchi_squared_test_result <- chisq.test(observed)  # Performing the chi-squared test\nprint(chi_squared_test_result)\n#> \n#>  Pearson's Chi-squared test\n#> \n#> data:  observed\n#> X-squared = 0, df = 1, p-value = 1"},{"path":"optional-part-v-working-with-dates-and-times-20-minutes.html","id":"optional-part-v-working-with-dates-and-times-20-minutes","chapter":"(Optional) Part V: Working with Dates and Times (20 minutes)","heading":"(Optional) Part V: Working with Dates and Times (20 minutes)","text":"","code":""},{"path":"optional-part-v-working-with-dates-and-times-20-minutes.html","id":"handling-date-and-time-data-in-r","chapter":"(Optional) Part V: Working with Dates and Times (20 minutes)","heading":"Handling date and time data in R","text":"R provides Date class dates POSIXct POSIXlt classes times.","code":"\n# Converting a string to a Date object\ndate_example <- as.Date(\"2021-01-01\")\nprint(date_example)\n#> [1] \"2021-01-01\"\n\n# Converting a string to a POSIXct datetime object\ndatetime_example <- as.POSIXct(\"2021-01-01 10:00:00\", tz = \"GMT\")\nprint(datetime_example)\n#> [1] \"2021-01-01 10:00:00 GMT\""},{"path":"optional-part-v-working-with-dates-and-times-20-minutes.html","id":"common-date-and-time-functions","chapter":"(Optional) Part V: Working with Dates and Times (20 minutes)","heading":"Common date and time functions","text":"Exercises:Convert ‘Date’ column ‘airquality’ dataset week day create new column ‘WeekDay’.Calculate number days first last measurements ‘airquality’ dataset.","code":"\n\n# Extracting parts of a date\nyear <- format(date_example, \"%Y\")\nmonth <- format(date_example, \"%m\")\nday <- format(date_example, \"%d\")\nprint(paste(\"Year:\", year, \"- Month:\", month, \"- Day:\", day))\n#> [1] \"Year: 2021 - Month: 01 - Day: 01\"\n\n# Working with time intervals\nstart_time <- as.POSIXct(\"2021-01-01 08:00:00\", tz = \"GMT\")\nend_time <- as.POSIXct(\"2021-01-01 10:00:00\", tz = \"GMT\")\ntime_diff <- difftime(end_time, start_time, units = \"hours\")\nprint(paste(\"Difference in hours:\", time_diff))\n#> [1] \"Difference in hours: 2\"\n\n# Loading a dataset with date and time data for exercises\n# Using the 'airquality' dataset from the 'datasets' package\ndata(airquality)\nairquality$Date <- as.Date(with(airquality, paste(1973, Month, Day, sep = \"-\")))\nprint(head(airquality))\n#>   Ozone Solar.R Wind Temp Month Day       Date\n#> 1    41     190  7.4   67     5   1 1973-05-01\n#> 2    36     118  8.0   72     5   2 1973-05-02\n#> 3    12     149 12.6   74     5   3 1973-05-03\n#> 4    18     313 11.5   62     5   4 1973-05-04\n#> 5    NA      NA 14.3   56     5   5 1973-05-05\n#> 6    28      NA 14.9   66     5   6 1973-05-06\ndata(airquality)\n\nairquality$Date <- as.Date(with(airquality, paste(1973, Month, Day, sep = \"-\")))\nprint(head(airquality))\n#>   Ozone Solar.R Wind Temp Month Day       Date\n#> 1    41     190  7.4   67     5   1 1973-05-01\n#> 2    36     118  8.0   72     5   2 1973-05-02\n#> 3    12     149 12.6   74     5   3 1973-05-03\n#> 4    18     313 11.5   62     5   4 1973-05-04\n#> 5    NA      NA 14.3   56     5   5 1973-05-05\n#> 6    28      NA 14.9   66     5   6 1973-05-06\nairquality$WeekDay <- weekdays(airquality$Date)\nprint(head(airquality))\n#>   Ozone Solar.R Wind Temp Month Day       Date   WeekDay\n#> 1    41     190  7.4   67     5   1 1973-05-01   Tuesday\n#> 2    36     118  8.0   72     5   2 1973-05-02 Wednesday\n#> 3    12     149 12.6   74     5   3 1973-05-03  Thursday\n#> 4    18     313 11.5   62     5   4 1973-05-04    Friday\n#> 5    NA      NA 14.3   56     5   5 1973-05-05  Saturday\n#> 6    28      NA 14.9   66     5   6 1973-05-06    Sunday\ndate_diff <- difftime(max(airquality$Date), min(airquality$Date), units = \"days\")\nprint(paste(\"Days between first and last measurement:\", date_diff))\n#> [1] \"Days between first and last measurement: 152\""},{"path":"part-i-advanced-data-manipulation-with-dplyr-30-minutes.html","id":"part-i-advanced-data-manipulation-with-dplyr-30-minutes","chapter":"Part I: Advanced Data Manipulation with dplyr (30 minutes)","heading":"Part I: Advanced Data Manipulation with dplyr (30 minutes)","text":"","code":""},{"path":"part-i-advanced-data-manipulation-with-dplyr-30-minutes.html","id":"grouping-and-summarizing-data","chapter":"Part I: Advanced Data Manipulation with dplyr (30 minutes)","heading":"Grouping and summarizing data","text":"Exercise:Group ‘mtcars’ dataset ‘gear’ calculate average horsepower (‘hp’) gear group.","code":"\n# Loading the dplyr package\nlibrary(dplyr)\n#> \n#> Attaching package: 'dplyr'\n#> The following objects are masked from 'package:stats':\n#> \n#>     filter, lag\n#> The following objects are masked from 'package:base':\n#> \n#>     intersect, setdiff, setequal, union\n\n# Using the 'mtcars' dataset\ndata(mtcars)\n\n# Example: Grouping by 'cyl' (number of cylinders) and calculating mean mpg (miles per gallon)\ngrouped_data <- mtcars %>%\n  group_by(cyl) %>%\n  summarize(mean_mpg = mean(mpg))\nprint(grouped_data)\n#> # A tibble: 3 × 2\n#>     cyl mean_mpg\n#>   <dbl>    <dbl>\n#> 1     4     26.7\n#> 2     6     19.7\n#> 3     8     15.1"},{"path":"part-i-advanced-data-manipulation-with-dplyr-30-minutes.html","id":"joining-and-merging-datasets","chapter":"Part I: Advanced Data Manipulation with dplyr (30 minutes)","heading":"Joining and merging datasets","text":"Exercise:Create new dataframe subset columns ‘iris’ merge original ‘iris’ dataset based common column.","code":"\n# Creating a sample dataset to join with 'mtcars'\ncar_names <- data.frame(model = rownames(mtcars), car_type = rep(c(\"Type A\", \"Type B\", \"Type C\"), length.out = nrow(mtcars)))\n\n# Converting row names of 'mtcars' to a column\nmtcars$model <- rownames(mtcars)\n\n# Example: Joining 'mtcars' and 'car_names'\njoined_data <- left_join(mtcars, car_names, by = \"model\")\nprint(head(joined_data))\n#>    mpg cyl disp  hp drat    wt  qsec vs am gear carb\n#> 1 21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\n#> 2 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\n#> 3 22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\n#> 4 21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\n#> 5 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\n#> 6 18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n#>               model car_type\n#> 1         Mazda RX4   Type A\n#> 2     Mazda RX4 Wag   Type B\n#> 3        Datsun 710   Type C\n#> 4    Hornet 4 Drive   Type A\n#> 5 Hornet Sportabout   Type B\n#> 6           Valiant   Type C"},{"path":"part-ii-text-data-processing-30-minutes.html","id":"part-ii-text-data-processing-30-minutes","chapter":"Part II: Text Data Processing (30 minutes)","heading":"Part II: Text Data Processing (30 minutes)","text":"","code":""},{"path":"part-ii-text-data-processing-30-minutes.html","id":"manipulating-and-analyzing-text-data-using-regular-expressions","chapter":"Part II: Text Data Processing (30 minutes)","heading":"Manipulating and analyzing text data using regular expressions","text":"Exercise:Write regular expression find words starting ‘b’ given text.","code":"\n# --- Part II: Text Data Processing (30 minutes) ---\n\n# Load necessary libraries\nlibrary(stringr)\n\n## Manipulating and analyzing text data using regular expressions\n\n# Example: Extracting email addresses from a string\ntext <- \"Contact us at support@example.com or feedback@example.net\"\nemails <- str_extract_all(text, \"[[:alnum:]_.]+@[[:alnum:]]+\\\\.[[:alpha:]]{2,}\")\nprint(emails)\n#> [[1]]\n#> [1] \"support@example.com\"  \"feedback@example.net\""},{"path":"part-ii-text-data-processing-30-minutes.html","id":"text-mining-basics","chapter":"Part II: Text Data Processing (30 minutes)","heading":"Text mining basics","text":"Exercise:Create corpus text data compute term frequency-inverse document frequency (tf-idf) matrix.","code":"\n\n# Load the 'tm' package for text mining\nlibrary(tm)\n#> Loading required package: NLP\n\n# Example: Basic text mining with a simple corpus\ndocs <- Corpus(VectorSource(c(\"Text mining is awesome\", \"R is a versatile tool for text analysis\")))\ndtm <- DocumentTermMatrix(docs)\ninspect(dtm)\n#> <<DocumentTermMatrix (documents: 2, terms: 7)>>\n#> Non-/sparse entries: 8/6\n#> Sparsity           : 43%\n#> Maximal term length: 9\n#> Weighting          : term frequency (tf)\n#> Sample             :\n#>     Terms\n#> Docs analysis awesome for mining text tool versatile\n#>    1        0       1   0      1    1    0         0\n#>    2        1       0   1      0    1    1         1"},{"path":"part-iii-building-predictive-models-30-minutes.html","id":"part-iii-building-predictive-models-30-minutes","chapter":"Part III: Building Predictive Models (30 minutes)","heading":"Part III: Building Predictive Models (30 minutes)","text":"","code":""},{"path":"part-iii-building-predictive-models-30-minutes.html","id":"introduction-to-machine-learning-in-r","chapter":"Part III: Building Predictive Models (30 minutes)","heading":"Introduction to machine learning in R","text":"Brief overview machine learning: Machine learning R involves using statistical techniques enable computers improve tasks experience. encompasses variety techniques classification, regression, clustering, .Exercise:Load different dataset partition training testing sets.","code":"\n# Load necessary libraries\n#install.packages(\"caret\")\nlibrary(caret)\n#> Loading required package: ggplot2\n#> Loading required package: lattice\n\n\n# Example: Splitting a dataset into training and testing sets\ndata(iris)\nset.seed(123) # Setting seed for reproducibility\ntrainingIndex <- createDataPartition(iris$Species, p = 0.8, list = FALSE)\ntrainingData <- iris[trainingIndex, ]\ntestingData <- iris[-trainingIndex, ]"},{"path":"part-iii-building-predictive-models-30-minutes.html","id":"creating-predictive-models-with-caret","chapter":"Part III: Building Predictive Models (30 minutes)","heading":"Creating predictive models with caret","text":"Exercise:\n2. Build predictive model another dataset evaluate performance.basic structure Shiny app involves two main parts:user interface (UI) script, controls layout appearance app.server script, contains instructions build rebuild app based user input.","code":"\n\n# Example: Building a predictive model for the iris dataset\nmodel <- train(Species ~ ., data = trainingData, method = \"rpart\")\nprint(model)\n#> CART \n#> \n#> 120 samples\n#>   4 predictor\n#>   3 classes: 'setosa', 'versicolor', 'virginica' \n#> \n#> No pre-processing\n#> Resampling: Bootstrapped (25 reps) \n#> Summary of sample sizes: 120, 120, 120, 120, 120, 120, ... \n#> Resampling results across tuning parameters:\n#> \n#>   cp    Accuracy   Kappa    \n#>   0.00  0.9398492  0.9086993\n#>   0.45  0.7426390  0.6253355\n#>   0.50  0.5557896  0.3665192\n#> \n#> Accuracy was used to select the optimal model using\n#>  the largest value.\n#> The final value used for the model was cp = 0.\n\n# Predicting using the model\npredictions <- predict(model, testingData)\nconfusionMatrix(predictions, testingData$Species)\n#> Confusion Matrix and Statistics\n#> \n#>             Reference\n#> Prediction   setosa versicolor virginica\n#>   setosa         10          0         0\n#>   versicolor      0         10         2\n#>   virginica       0          0         8\n#> \n#> Overall Statistics\n#>                                           \n#>                Accuracy : 0.9333          \n#>                  95% CI : (0.7793, 0.9918)\n#>     No Information Rate : 0.3333          \n#>     P-Value [Acc > NIR] : 8.747e-12       \n#>                                           \n#>                   Kappa : 0.9             \n#>                                           \n#>  Mcnemar's Test P-Value : NA              \n#> \n#> Statistics by Class:\n#> \n#>                      Class: setosa Class: versicolor\n#> Sensitivity                 1.0000            1.0000\n#> Specificity                 1.0000            0.9000\n#> Pos Pred Value              1.0000            0.8333\n#> Neg Pred Value              1.0000            1.0000\n#> Prevalence                  0.3333            0.3333\n#> Detection Rate              0.3333            0.3333\n#> Detection Prevalence        0.3333            0.4000\n#> Balanced Accuracy           1.0000            0.9500\n#>                      Class: virginica\n#> Sensitivity                    0.8000\n#> Specificity                    1.0000\n#> Pos Pred Value                 1.0000\n#> Neg Pred Value                 0.9091\n#> Prevalence                     0.3333\n#> Detection Rate                 0.2667\n#> Detection Prevalence           0.2667\n#> Balanced Accuracy              0.9000\n\n<!--chapter:end:13-Advanced-R-Part3.Rmd-->\n\n# Part IV: Interactive Dashboards with Shiny (30 minutes) {-}\n## Introduction to Shiny for building web-based data dashboards {-}\n\nShiny is an R package that makes it easy to build interactive web applications (apps) straight from R. It allows you to turn analyses into interactive web applications without requiring HTML, CSS, or JavaScript knowledge.\n\n\n```r\n# Load the Shiny package\n#install.packages(\"shiny\")\nlibrary(shiny)"},{"path":"part-iii-building-predictive-models-30-minutes.html","id":"creating-a-simple-shiny-app","chapter":"Part III: Building Predictive Models (30 minutes)","heading":"Creating a simple Shiny app","text":"UI Component: UI sliderInput selecting mpg range tableOutput display filtered data.Server Logic: reactive function creates reactive subset mtcars based selected mpg range. renderTable function renders filtered data table main panel.Running App: Shiny app, shinyApp(ui = ui, server = server) runs app.Exercise:Modify example Shiny app include dataset choice create different type plot.Modify example Shiny app include dataset choice create different type plot.Add additional input options, like checkboxes dropdown menus, manipulate plot.Add additional input options, like checkboxes dropdown menus, manipulate plot.","code":"\n\n# Example: A simple Shiny app for displaying a plot\n\n# Define UI\nui <- fluidPage(\n  titlePanel(\"Simple Shiny App\"),\n  sidebarLayout(\n    sidebarPanel(\n      sliderInput(\"num\", \"Number of bins:\", \n                  min = 1, max = 50, value = 30)\n    ),\n    mainPanel(\n       plotOutput(\"distPlot\")\n    )\n  )\n)\n\n# Define server logic\nserver <- function(input, output) {\n  output$distPlot <- renderPlot({\n    x <- faithful$eruptions\n    bins <- seq(min(x), max(x), length.out = input$num + 1)\n    hist(x, breaks = bins, col = 'darkgray', border = 'white')\n  })\n}\n\n# Run the application \nshinyApp(ui = ui, server = server)\n\n# Define UI\nui <- fluidPage(\n  titlePanel(\"Data Filtering App\"),\n  sidebarLayout(\n    sidebarPanel(\n      sliderInput(\"mpgRange\", \"Miles per Gallon (mpg):\",\n                  min = min(mtcars$mpg), max = max(mtcars$mpg),\n                  value = c(min(mtcars$mpg), max(mtcars$mpg))\n      )\n    ),\n    mainPanel(\n      tableOutput(\"filteredData\")\n    )\n  )\n)\n\n# Define server logic\nserver <- function(input, output) {\n  filteredData <- reactive({\n    mtcars[mtcars$mpg >= input$mpgRange[1] & mtcars$mpg <= input$mpgRange[2], ]\n  })\n\n  output$filteredData <- renderTable({\n    filteredData()\n  })\n}\n\n# Run the application \nshinyApp(ui = ui, server = server)"},{"path":"optional-part-v-version-control-and-collaboration-10-minutes.html","id":"optional-part-v-version-control-and-collaboration-10-minutes","chapter":"(Optional) Part V: Version Control and Collaboration (10 minutes)","heading":"(Optional) Part V: Version Control and Collaboration (10 minutes)","text":"","code":""},{"path":"optional-part-v-version-control-and-collaboration-10-minutes.html","id":"using-git-and-github-for-version-control-and-collaboration-in-r-projects","chapter":"(Optional) Part V: Version Control and Collaboration (10 minutes)","heading":"Using Git and GitHub for version control and collaboration in R projects","text":"Git distributed version control system helps track changes source code software development. GitHub cloud-based hosting service lets manage Git repositories.Integrating Git R:\n1. Install Git set GitHub account.\n2. Configure Git username email.\n- Use Git Bash terminal:\ngit config –global user.name “Name”\ngit config –global user.email “.email@example.com”Initialize Git repository R project:\nRStudio, start new project select option create Git repository.\nRStudio, start new project select option create Git repository.Basic Git commands:\ngit init: Initialize new Git repository.\ngit status: Check status changes.\ngit add: Add files staging area.\ngit commit: Commit changes repository.\ngit push: Push changes remote repository like GitHub.\ngit pull: Pull updates remote repository.\ngit init: Initialize new Git repository.git status: Check status changes.git add: Add files staging area.git commit: Commit changes repository.git push: Push changes remote repository like GitHub.git pull: Pull updates remote repository.Collaborating GitHub:\nFork clone repositories.\nCreate branches features fixes.\nUse pull requests code reviews.\nMerge changes main branch.\nFork clone repositories.Create branches features fixes.Use pull requests code reviews.Merge changes main branch.Exercise:Create new R project Git repository.Make changes project, commit , push GitHub repository.Collaborate colleague friend fork repository submit pull request.","code":""},{"path":"references.html","id":"references","chapter":"References","heading":"References","text":"","code":""}]
